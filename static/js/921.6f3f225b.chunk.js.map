{"version":3,"file":"static/js/921.6f3f225b.chunk.js","mappings":"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","sources":["webpack://social-app/./src/components/People/People.module.css?9c3c","webpack://social-app/./src/components/Common/Paginator/Paginator.module.css?308c","components/Common/Paginator/Paginator.jsx","components/People/People.jsx","../node_modules/reselect/src/utils.ts","../node_modules/reselect/src/autotrackMemoize/proxy.ts","../node_modules/reselect/src/weakMapMemoize.ts","../node_modules/reselect/src/createSelectorCreator.ts","../node_modules/reselect/src/createStructuredSelector.ts","redux/selectors/peopleSelectors.js","components/People/PeopleContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"peopleList\":\"People_peopleList__KtrZK\",\"item\":\"People_item__SFDOb\",\"homosImg\":\"People_homosImg__ALAPy\",\"homosImgBody\":\"People_homosImgBody__MrjkR\",\"fullName\":\"People_fullName__lSMrY\",\"placeOfPozition\":\"People_placeOfPozition__Zcd6A\",\"friendsNumber\":\"People_friendsNumber__ZVVLq\",\"homosFriends\":\"People_homosFriends__LhmuY\",\"homosFriendsText\":\"People_homosFriendsText__qouvM\",\"follow\":\"People_follow__kfgRZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"paginationConteiner\":\"Paginator_paginationConteiner__CAdiZ\",\"paginationNumber\":\"Paginator_paginationNumber__yXdQx\",\"paginationHover\":\"Paginator_paginationHover__e+Cfv\",\"divEmpty\":\"Paginator_divEmpty__6DpDL\",\"paginControl\":\"Paginator_paginControl__PhbrP\"};","import React, { useEffect, useState } from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\nconst Pagination=({peopleCount,totalCount,numberPage,onPaginationClick,portionSize=10,...props})=>{\r\n  let pages=[]\r\n  let pagesCountLength=Math.ceil(totalCount/peopleCount)\r\n  let [portionNumber,setPortioNumber]=useState(1)   \r\n  let portionCount=Math.ceil(pagesCountLength/portionSize)      \r\n  let leftCorner=(portionNumber-1)*portionSize+1   \r\n  let rightCorner=portionNumber*portionSize      \r\n  useEffect(()=>setPortioNumber(Math.ceil(numberPage/portionSize)), [numberPage,portionSize])\r\n        for (let index = 1; index <= pagesCountLength; index++) {\r\n          pages.push(index)\r\n        }\r\n        \r\n\r\n    return <div className={s.paginationConteiner}>\r\n      {portionNumber>1?\r\n      <button className={`${s.paginControl} ${s.prev}`} onClick={()=>setPortioNumber(portionNumber-1)}>prev</button>\r\n    :<div className={s.divEmpty}></div>}\r\n    <div className={s.paginationNumber}>\r\n      {pages\r\n      .filter(p=>p>=leftCorner&&p<=rightCorner)\r\n      .map(p=><span onClick={()=>onPaginationClick(p)} key={p} className={numberPage===p?s.paginationHover:\"\"}> {p} </span>)}\r\n    </div>\r\n      {portionCount>portionSize&&<button className={`${s.paginControl} ${s.next}`} onClick={()=>setPortioNumber(portionNumber+1)}>next</button>}\r\n    </div>\r\n}\r\nexport default Pagination","import React from \"react\";\r\nimport c from \"./People.module.css\";\r\nimport pustoyprofile from \"./../../accets/images/pustoyprofile.jpg\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Pagination from \"../Common/Paginator/Paginator\";\r\n\r\nconst People = (props) => {\r\n  let peopleList=()=>{\r\n        const peopleList = props.people.map((homos) => {\r\n              return <div key={homos.id} className={c.item}>\r\n                  <NavLink to={`/profile/${homos.id}`} className={c.homosImg}>\r\n                  <div className={c.homosImgBody}><img src={homos.photos.small?homos.photos.small:pustoyprofile} alt=\"\" /></div>\r\n                  </NavLink>\r\n                  <p className={c.fullName}><span>{homos.name}</span><span>{homos.surname}</span></p>\r\n                  <p className={c.placeOfPozition}><span>{homos.country}</span><span>{homos.sityname}</span></p>\r\n                  <div className={c.friendsNumber}>\r\n                      <p className={c.homosFriends}>{homos.friends}</p>\r\n                      <p className={c.homosFriendsText}>Friends</p>\r\n                  </div>\r\n                  {homos.followed?\r\n                  <button disabled={props.disabledFollowsWhenFetshing.some(id=>id===homos.id)} onClick={()=>{props.unfollow(homos.id)}} className={c.follow}>Unfollow</button>:\r\n                  <button disabled={props.disabledFollowsWhenFetshing.some(id=>id===homos.id)} onClick={()=>props.follow(homos.id)} className={c.follow}>Follow</button>}\r\n              </div>;\r\n            });\r\n            return peopleList\r\n      }\r\n  return (\r\n    <div>\r\n      <Pagination  peopleCount={props.peopleCount} totalCount={props.totalCount} numberPage={props.numberPage} onPaginationClick={props.onPaginationClick}/>\r\n      {props.isFetching?<Preloader/>:<div className={c.peopleList}>{peopleList()}</div>}\r\n    </div>\r\n  );\r\n};\r\nexport default People\r\n","import { runIdentityFunctionCheck } from './devModeChecks/identityFunctionCheck'\nimport { runInputStabilityCheck } from './devModeChecks/inputStabilityCheck'\nimport { globalDevModeChecks } from './devModeChecks/setGlobalDevModeChecks'\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\nimport type {\n  DevModeChecks,\n  Selector,\n  SelectorArray,\n  DevModeChecksExecutionInfo\n} from './types'\n\nexport const NOT_FOUND = 'NOT_FOUND'\nexport type NOT_FOUND_TYPE = typeof NOT_FOUND\n\n/**\n * Assert that the provided value is a function. If the assertion fails,\n * a `TypeError` is thrown with an optional custom error message.\n *\n * @param func - The value to be checked.\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\n * @throws A `TypeError` if the assertion fails.\n */\nexport function assertIsFunction<FunctionType extends Function>(\n  func: unknown,\n  errorMessage = `expected a function, instead received ${typeof func}`\n): asserts func is FunctionType {\n  if (typeof func !== 'function') {\n    throw new TypeError(errorMessage)\n  }\n}\n\n/**\n * Assert that the provided value is an object. If the assertion fails,\n * a `TypeError` is thrown with an optional custom error message.\n *\n * @param object - The value to be checked.\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\n * @throws A `TypeError` if the assertion fails.\n */\nexport function assertIsObject<ObjectType extends Record<string, unknown>>(\n  object: unknown,\n  errorMessage = `expected an object, instead received ${typeof object}`\n): asserts object is ObjectType {\n  if (typeof object !== 'object') {\n    throw new TypeError(errorMessage)\n  }\n}\n\n/**\n * Assert that the provided array is an array of functions. If the assertion fails,\n * a `TypeError` is thrown with an optional custom error message.\n *\n * @param array - The array to be checked.\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\n * @throws A `TypeError` if the assertion fails.\n */\nexport function assertIsArrayOfFunctions<FunctionType extends Function>(\n  array: unknown[],\n  errorMessage = `expected all items to be functions, instead received the following types: `\n): asserts array is FunctionType[] {\n  if (\n    !array.every((item): item is FunctionType => typeof item === 'function')\n  ) {\n    const itemTypes = array\n      .map(item =>\n        typeof item === 'function'\n          ? `function ${item.name || 'unnamed'}()`\n          : typeof item\n      )\n      .join(', ')\n    throw new TypeError(`${errorMessage}[${itemTypes}]`)\n  }\n}\n\n/**\n * Ensure that the input is an array. If it's already an array, it's returned as is.\n * If it's not an array, it will be wrapped in a new array.\n *\n * @param item - The item to be checked.\n * @returns An array containing the input item. If the input is already an array, it's returned without modification.\n */\nexport const ensureIsArray = (item: unknown) => {\n  return Array.isArray(item) ? item : [item]\n}\n\n/**\n * Extracts the \"dependencies\" / \"input selectors\" from the arguments of `createSelector`.\n *\n * @param createSelectorArgs - Arguments passed to `createSelector` as an array.\n * @returns An array of \"input selectors\" / \"dependencies\".\n * @throws A `TypeError` if any of the input selectors is not function.\n */\nexport function getDependencies(createSelectorArgs: unknown[]) {\n  const dependencies = Array.isArray(createSelectorArgs[0])\n    ? createSelectorArgs[0]\n    : createSelectorArgs\n\n  assertIsArrayOfFunctions<Selector>(\n    dependencies,\n    `createSelector expects all input-selectors to be functions, but received the following types: `\n  )\n\n  return dependencies as SelectorArray\n}\n\n/**\n * Runs each input selector and returns their collective results as an array.\n *\n * @param dependencies - An array of \"dependencies\" or \"input selectors\".\n * @param inputSelectorArgs - An array of arguments being passed to the input selectors.\n * @returns An array of input selector results.\n */\nexport function collectInputSelectorResults(\n  dependencies: SelectorArray,\n  inputSelectorArgs: unknown[] | IArguments\n) {\n  const inputSelectorResults = []\n  const { length } = dependencies\n  for (let i = 0; i < length; i++) {\n    // @ts-ignore\n    // apply arguments instead of spreading and mutate a local list of params for performance.\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs))\n  }\n  return inputSelectorResults\n}\n\n/**\n * Retrieves execution information for development mode checks.\n *\n * @param devModeChecks - Custom Settings for development mode checks. These settings will override the global defaults.\n * @param firstRun - Indicates whether it is the first time the selector has run.\n * @returns  An object containing the execution information for each development mode check.\n */\nexport const getDevModeChecksExecutionInfo = (\n  firstRun: boolean,\n  devModeChecks: Partial<DevModeChecks>\n) => {\n  const { identityFunctionCheck, inputStabilityCheck } = {\n    ...globalDevModeChecks,\n    ...devModeChecks\n  }\n  return {\n    identityFunctionCheck: {\n      shouldRun:\n        identityFunctionCheck === 'always' ||\n        (identityFunctionCheck === 'once' && firstRun),\n      run: runIdentityFunctionCheck\n    },\n    inputStabilityCheck: {\n      shouldRun:\n        inputStabilityCheck === 'always' ||\n        (inputStabilityCheck === 'once' && firstRun),\n      run: runInputStabilityCheck\n    }\n  } satisfies DevModeChecksExecutionInfo\n}\n","// Original source:\n// - https://github.com/simonihmig/tracked-redux/blob/master/packages/tracked-redux/src/-private/proxy.ts\n\nimport type { Node, Tag } from './tracking'\nimport {\n  consumeCollection,\n  consumeTag,\n  createTag,\n  dirtyCollection,\n  dirtyTag\n} from './tracking'\n\nexport const REDUX_PROXY_LABEL = Symbol()\n\nlet nextId = 0\n\nconst proto = Object.getPrototypeOf({})\n\nclass ObjectTreeNode<T extends Record<string, unknown>> implements Node<T> {\n  proxy: T = new Proxy(this, objectProxyHandler) as unknown as T\n  tag = createTag()\n  tags = {} as Record<string, Tag>\n  children = {} as Record<string, Node>\n  collectionTag = null\n  id = nextId++\n\n  constructor(public value: T) {\n    this.value = value\n    this.tag.value = value\n  }\n}\n\nconst objectProxyHandler = {\n  get(node: Node, key: string | symbol): unknown {\n    function calculateResult() {\n      const { value } = node\n\n      const childValue = Reflect.get(value, key)\n\n      if (typeof key === 'symbol') {\n        return childValue\n      }\n\n      if (key in proto) {\n        return childValue\n      }\n\n      if (typeof childValue === 'object' && childValue !== null) {\n        let childNode = node.children[key]\n\n        if (childNode === undefined) {\n          childNode = node.children[key] = createNode(childValue)\n        }\n\n        if (childNode.tag) {\n          consumeTag(childNode.tag)\n        }\n\n        return childNode.proxy\n      } else {\n        let tag = node.tags[key]\n\n        if (tag === undefined) {\n          tag = node.tags[key] = createTag()\n          tag.value = childValue\n        }\n\n        consumeTag(tag)\n\n        return childValue\n      }\n    }\n    const res = calculateResult()\n    return res\n  },\n\n  ownKeys(node: Node): ArrayLike<string | symbol> {\n    consumeCollection(node)\n    return Reflect.ownKeys(node.value)\n  },\n\n  getOwnPropertyDescriptor(\n    node: Node,\n    prop: string | symbol\n  ): PropertyDescriptor | undefined {\n    return Reflect.getOwnPropertyDescriptor(node.value, prop)\n  },\n\n  has(node: Node, prop: string | symbol): boolean {\n    return Reflect.has(node.value, prop)\n  }\n}\n\nclass ArrayTreeNode<T extends Array<unknown>> implements Node<T> {\n  proxy: T = new Proxy([this], arrayProxyHandler) as unknown as T\n  tag = createTag()\n  tags = {}\n  children = {}\n  collectionTag = null\n  id = nextId++\n\n  constructor(public value: T) {\n    this.value = value\n    this.tag.value = value\n  }\n}\n\nconst arrayProxyHandler = {\n  get([node]: [Node], key: string | symbol): unknown {\n    if (key === 'length') {\n      consumeCollection(node)\n    }\n\n    return objectProxyHandler.get(node, key)\n  },\n\n  ownKeys([node]: [Node]): ArrayLike<string | symbol> {\n    return objectProxyHandler.ownKeys(node)\n  },\n\n  getOwnPropertyDescriptor(\n    [node]: [Node],\n    prop: string | symbol\n  ): PropertyDescriptor | undefined {\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop)\n  },\n\n  has([node]: [Node], prop: string | symbol): boolean {\n    return objectProxyHandler.has(node, prop)\n  }\n}\n\nexport function createNode<T extends Array<unknown> | Record<string, unknown>>(\n  value: T\n): Node<T> {\n  if (Array.isArray(value)) {\n    return new ArrayTreeNode(value)\n  }\n\n  return new ObjectTreeNode(value) as Node<T>\n}\n\nconst keysMap = new WeakMap<\n  Array<unknown> | Record<string, unknown>,\n  Set<string>\n>()\n\nexport function updateNode<T extends Array<unknown> | Record<string, unknown>>(\n  node: Node<T>,\n  newValue: T\n): void {\n  const { value, tags, children } = node\n\n  node.value = newValue\n\n  if (\n    Array.isArray(value) &&\n    Array.isArray(newValue) &&\n    value.length !== newValue.length\n  ) {\n    dirtyCollection(node)\n  } else {\n    if (value !== newValue) {\n      let oldKeysSize = 0\n      let newKeysSize = 0\n      let anyKeysAdded = false\n\n      for (const _key in value) {\n        oldKeysSize++\n      }\n\n      for (const key in newValue) {\n        newKeysSize++\n        if (!(key in value)) {\n          anyKeysAdded = true\n          break\n        }\n      }\n\n      const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize\n\n      if (isDifferent) {\n        dirtyCollection(node)\n      }\n    }\n  }\n\n  for (const key in tags) {\n    const childValue = (value as Record<string, unknown>)[key]\n    const newChildValue = (newValue as Record<string, unknown>)[key]\n\n    if (childValue !== newChildValue) {\n      dirtyCollection(node)\n      dirtyTag(tags[key], newChildValue)\n    }\n\n    if (typeof newChildValue === 'object' && newChildValue !== null) {\n      delete tags[key]\n    }\n  }\n\n  for (const key in children) {\n    const childNode = children[key]\n    const newChildValue = (newValue as Record<string, unknown>)[key]\n\n    const childValue = childNode.value\n\n    if (childValue === newChildValue) {\n      continue\n    } else if (typeof newChildValue === 'object' && newChildValue !== null) {\n      updateNode(childNode, newChildValue as Record<string, unknown>)\n    } else {\n      deleteNode(childNode)\n      delete children[key]\n    }\n  }\n}\n\nfunction deleteNode(node: Node): void {\n  if (node.tag) {\n    dirtyTag(node.tag, null)\n  }\n  dirtyCollection(node)\n  for (const key in node.tags) {\n    dirtyTag(node.tags[key], null)\n  }\n  for (const key in node.children) {\n    deleteNode(node.children[key])\n  }\n}\n","// Original source:\n// - https://github.com/facebook/react/blob/0b974418c9a56f6c560298560265dcf4b65784bc/packages/react/src/ReactCache.js\n\nimport type {\n  AnyFunction,\n  DefaultMemoizeFields,\n  EqualityFn,\n  Simplify\n} from './types'\n\nclass StrongRef<T> {\n  constructor(private value: T) {}\n  deref() {\n    return this.value\n  }\n}\n\nconst Ref =\n  typeof WeakRef !== 'undefined'\n    ? WeakRef\n    : (StrongRef as unknown as typeof WeakRef)\n\nconst UNTERMINATED = 0\nconst TERMINATED = 1\n\ninterface UnterminatedCacheNode<T> {\n  /**\n   * Status, represents whether the cached computation returned a value or threw an error.\n   */\n  s: 0\n  /**\n   * Value, either the cached result or an error, depending on status.\n   */\n  v: void\n  /**\n   * Object cache, a `WeakMap` where non-primitive arguments are stored.\n   */\n  o: null | WeakMap<Function | Object, CacheNode<T>>\n  /**\n   * Primitive cache, a regular Map where primitive arguments are stored.\n   */\n  p: null | Map<string | number | null | void | symbol | boolean, CacheNode<T>>\n}\n\ninterface TerminatedCacheNode<T> {\n  /**\n   * Status, represents whether the cached computation returned a value or threw an error.\n   */\n  s: 1\n  /**\n   * Value, either the cached result or an error, depending on status.\n   */\n  v: T\n  /**\n   * Object cache, a `WeakMap` where non-primitive arguments are stored.\n   */\n  o: null | WeakMap<Function | Object, CacheNode<T>>\n  /**\n   * Primitive cache, a regular `Map` where primitive arguments are stored.\n   */\n  p: null | Map<string | number | null | void | symbol | boolean, CacheNode<T>>\n}\n\ntype CacheNode<T> = TerminatedCacheNode<T> | UnterminatedCacheNode<T>\n\nfunction createCacheNode<T>(): CacheNode<T> {\n  return {\n    s: UNTERMINATED,\n    v: undefined,\n    o: null,\n    p: null\n  }\n}\n\n/**\n * Configuration options for a memoization function utilizing `WeakMap` for\n * its caching mechanism.\n *\n * @template Result - The type of the return value of the memoized function.\n *\n * @since 5.0.0\n * @public\n */\nexport interface WeakMapMemoizeOptions<Result = any> {\n  /**\n   * If provided, used to compare a newly generated output value against previous values in the cache.\n   * If a match is found, the old value is returned. This addresses the common\n   * ```ts\n   * todos.map(todo => todo.id)\n   * ```\n   * use case, where an update to another field in the original data causes a recalculation\n   * due to changed references, but the output is still effectively the same.\n   *\n   * @since 5.0.0\n   */\n  resultEqualityCheck?: EqualityFn<Result>\n}\n\n/**\n * Creates a tree of `WeakMap`-based cache nodes based on the identity of the\n * arguments it's been called with (in this case, the extracted values from your input selectors).\n * This allows `weakMapMemoize` to have an effectively infinite cache size.\n * Cache results will be kept in memory as long as references to the arguments still exist,\n * and then cleared out as the arguments are garbage-collected.\n *\n * __Design Tradeoffs for `weakMapMemoize`:__\n * - Pros:\n *   - It has an effectively infinite cache size, but you have no control over\n *   how long values are kept in cache as it's based on garbage collection and `WeakMap`s.\n * - Cons:\n *   - There's currently no way to alter the argument comparisons.\n *   They're based on strict reference equality.\n *   - It's roughly the same speed as `lruMemoize`, although likely a fraction slower.\n *\n * __Use Cases for `weakMapMemoize`:__\n * - This memoizer is likely best used for cases where you need to call the\n * same selector instance with many different arguments, such as a single\n * selector instance that is used in a list item component and called with\n * item IDs like:\n *   ```ts\n *   useSelector(state => selectSomeData(state, props.category))\n *   ```\n * @param func - The function to be memoized.\n * @returns A memoized function with a `.clearCache()` method attached.\n *\n * @example\n * <caption>Using `createSelector`</caption>\n * ```ts\n * import { createSelector, weakMapMemoize } from 'reselect'\n *\n * interface RootState {\n *   items: { id: number; category: string; name: string }[]\n * }\n *\n * const selectItemsByCategory = createSelector(\n *   [\n *     (state: RootState) => state.items,\n *     (state: RootState, category: string) => category\n *   ],\n *   (items, category) => items.filter(item => item.category === category),\n *   {\n *     memoize: weakMapMemoize,\n *     argsMemoize: weakMapMemoize\n *   }\n * )\n * ```\n *\n * @example\n * <caption>Using `createSelectorCreator`</caption>\n * ```ts\n * import { createSelectorCreator, weakMapMemoize } from 'reselect'\n *\n * const createSelectorWeakMap = createSelectorCreator({ memoize: weakMapMemoize, argsMemoize: weakMapMemoize })\n *\n * const selectItemsByCategory = createSelectorWeakMap(\n *   [\n *     (state: RootState) => state.items,\n *     (state: RootState, category: string) => category\n *   ],\n *   (items, category) => items.filter(item => item.category === category)\n * )\n * ```\n *\n * @template Func - The type of the function that is memoized.\n *\n * @see {@link https://reselect.js.org/api/weakMapMemoize `weakMapMemoize`}\n *\n * @since 5.0.0\n * @public\n * @experimental\n */\nexport function weakMapMemoize<Func extends AnyFunction>(\n  func: Func,\n  options: WeakMapMemoizeOptions<ReturnType<Func>> = {}\n) {\n  let fnNode = createCacheNode()\n  const { resultEqualityCheck } = options\n\n  let lastResult: WeakRef<object> | undefined\n\n  let resultsCount = 0\n\n  function memoized() {\n    let cacheNode = fnNode\n    const { length } = arguments\n    for (let i = 0, l = length; i < l; i++) {\n      const arg = arguments[i]\n      if (\n        typeof arg === 'function' ||\n        (typeof arg === 'object' && arg !== null)\n      ) {\n        // Objects go into a WeakMap\n        let objectCache = cacheNode.o\n        if (objectCache === null) {\n          cacheNode.o = objectCache = new WeakMap()\n        }\n        const objectNode = objectCache.get(arg)\n        if (objectNode === undefined) {\n          cacheNode = createCacheNode()\n          objectCache.set(arg, cacheNode)\n        } else {\n          cacheNode = objectNode\n        }\n      } else {\n        // Primitives go into a regular Map\n        let primitiveCache = cacheNode.p\n        if (primitiveCache === null) {\n          cacheNode.p = primitiveCache = new Map()\n        }\n        const primitiveNode = primitiveCache.get(arg)\n        if (primitiveNode === undefined) {\n          cacheNode = createCacheNode()\n          primitiveCache.set(arg, cacheNode)\n        } else {\n          cacheNode = primitiveNode\n        }\n      }\n    }\n\n    const terminatedNode = cacheNode as unknown as TerminatedCacheNode<any>\n\n    let result\n\n    if (cacheNode.s === TERMINATED) {\n      result = cacheNode.v\n    } else {\n      // Allow errors to propagate\n      result = func.apply(null, arguments as unknown as any[])\n      resultsCount++\n    }\n\n    terminatedNode.s = TERMINATED\n\n    if (resultEqualityCheck) {\n      const lastResultValue = lastResult?.deref?.() ?? lastResult\n      if (\n        lastResultValue != null &&\n        resultEqualityCheck(lastResultValue as ReturnType<Func>, result)\n      ) {\n        result = lastResultValue\n        resultsCount !== 0 && resultsCount--\n      }\n\n      const needsWeakRef =\n        (typeof result === 'object' && result !== null) ||\n        typeof result === 'function'\n      lastResult = needsWeakRef ? new Ref(result) : result\n    }\n    terminatedNode.v = result\n    return result\n  }\n\n  memoized.clearCache = () => {\n    fnNode = createCacheNode()\n    memoized.resetResultsCount()\n  }\n\n  memoized.resultsCount = () => resultsCount\n\n  memoized.resetResultsCount = () => {\n    resultsCount = 0\n  }\n\n  return memoized as Func & Simplify<DefaultMemoizeFields>\n}\n","import { weakMapMemoize } from './weakMapMemoize'\n\nimport type {\n  Combiner,\n  CreateSelectorOptions,\n  DropFirstParameter,\n  ExtractMemoizerFields,\n  GetParamsFromSelectors,\n  GetStateFromSelectors,\n  InterruptRecursion,\n  OutputSelector,\n  Selector,\n  SelectorArray,\n  SetRequired,\n  Simplify,\n  UnknownMemoizer\n} from './types'\n\nimport {\n  assertIsFunction,\n  collectInputSelectorResults,\n  ensureIsArray,\n  getDependencies,\n  getDevModeChecksExecutionInfo\n} from './utils'\n\n/**\n * An instance of `createSelector`, customized with a given memoize implementation.\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\n * @template StateType - The type of state that the selectors created with this selector creator will operate on.\n *\n * @public\n */\nexport interface CreateSelectorFunction<\n  MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n  ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n  StateType = any\n> {\n  /**\n   * Creates a memoized selector function.\n   *\n   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments and a `combiner` function.\n   * @returns A memoized output selector.\n   *\n   * @template InputSelectors - The type of the input selectors as an array.\n   * @template Result - The return type of the `combiner` as well as the output selector.\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\n   *\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\n   */\n  <InputSelectors extends SelectorArray<StateType>, Result>(\n    ...createSelectorArgs: [\n      ...inputSelectors: InputSelectors,\n      combiner: Combiner<InputSelectors, Result>\n    ]\n  ): OutputSelector<\n    InputSelectors,\n    Result,\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a memoized selector function.\n   *\n   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments, a `combiner` function and an `options` object.\n   * @returns A memoized output selector.\n   *\n   * @template InputSelectors - The type of the input selectors as an array.\n   * @template Result - The return type of the `combiner` as well as the output selector.\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\n   *\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\n   */\n  <\n    InputSelectors extends SelectorArray<StateType>,\n    Result,\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\n  >(\n    ...createSelectorArgs: [\n      ...inputSelectors: InputSelectors,\n      combiner: Combiner<InputSelectors, Result>,\n      createSelectorOptions: Simplify<\n        CreateSelectorOptions<\n          MemoizeFunction,\n          ArgsMemoizeFunction,\n          OverrideMemoizeFunction,\n          OverrideArgsMemoizeFunction\n        >\n      >\n    ]\n  ): OutputSelector<\n    InputSelectors,\n    Result,\n    OverrideMemoizeFunction,\n    OverrideArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a memoized selector function.\n   *\n   * @param inputSelectors - An array of input selectors.\n   * @param combiner - A function that Combines the input selectors and returns an output selector. Otherwise known as the result function.\n   * @param createSelectorOptions - An optional options object that allows for further customization per selector.\n   * @returns A memoized output selector.\n   *\n   * @template InputSelectors - The type of the input selectors array.\n   * @template Result - The return type of the `combiner` as well as the output selector.\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\n   *\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\n   */\n  <\n    InputSelectors extends SelectorArray<StateType>,\n    Result,\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\n  >(\n    inputSelectors: [...InputSelectors],\n    combiner: Combiner<InputSelectors, Result>,\n    createSelectorOptions?: Simplify<\n      CreateSelectorOptions<\n        MemoizeFunction,\n        ArgsMemoizeFunction,\n        OverrideMemoizeFunction,\n        OverrideArgsMemoizeFunction\n      >\n    >\n  ): OutputSelector<\n    InputSelectors,\n    Result,\n    OverrideMemoizeFunction,\n    OverrideArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode createSelector createSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every {@linkcode createSelector createSelector} call.\n   *\n   * @returns A pre-typed `createSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * import { createSelector } from 'reselect'\n   *\n   * export interface RootState {\n   *   todos: { id: number; completed: boolean }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * export const createAppSelector = createSelector.withTypes<RootState>()\n   *\n   * const selectTodoIds = createAppSelector(\n   *   [\n   *     // Type of `state` is set to `RootState`, no need to manually set the type\n   *     state => state.todos\n   *   ],\n   *   todos => todos.map(({ id }) => id)\n   * )\n   * ```\n   * @template OverrideStateType - The specific type of state used by all selectors created with this selector creator.\n   *\n   * @see {@link https://reselect.js.org/api/createselector#defining-a-pre-typed-createselector `createSelector.withTypes`}\n   *\n   * @since 5.1.0\n   */\n  withTypes: <OverrideStateType extends StateType>() => CreateSelectorFunction<\n    MemoizeFunction,\n    ArgsMemoizeFunction,\n    OverrideStateType\n  >\n}\n\n/**\n * Creates a selector creator function with the specified memoization function\n * and options for customizing memoization behavior.\n *\n * @param options - An options object containing the `memoize` function responsible for memoizing the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). It also provides additional options for customizing memoization. While the `memoize` property is mandatory, the rest are optional.\n * @returns A customized `createSelector` function.\n *\n * @example\n * ```ts\n * const customCreateSelector = createSelectorCreator({\n *   memoize: customMemoize, // Function to be used to memoize `resultFunc`\n *   memoizeOptions: [memoizeOption1, memoizeOption2], // Options passed to `customMemoize` as the second argument onwards\n *   argsMemoize: customArgsMemoize, // Function to be used to memoize the selector's arguments\n *   argsMemoizeOptions: [argsMemoizeOption1, argsMemoizeOption2] // Options passed to `customArgsMemoize` as the second argument onwards\n * })\n *\n * const customSelector = customCreateSelector(\n *   [inputSelector1, inputSelector2],\n *   resultFunc // `resultFunc` will be passed as the first argument to `customMemoize`\n * )\n *\n * customSelector(\n *   ...selectorArgs // Will be memoized by `customArgsMemoize`\n * )\n * ```\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\n *\n * @see {@link https://reselect.js.org/api/createSelectorCreator#using-options-since-500 `createSelectorCreator`}\n *\n * @since 5.0.0\n * @public\n */\nexport function createSelectorCreator<\n  MemoizeFunction extends UnknownMemoizer,\n  ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n>(\n  options: Simplify<\n    SetRequired<\n      CreateSelectorOptions<\n        typeof weakMapMemoize,\n        typeof weakMapMemoize,\n        MemoizeFunction,\n        ArgsMemoizeFunction\n      >,\n      'memoize'\n    >\n  >\n): CreateSelectorFunction<MemoizeFunction, ArgsMemoizeFunction>\n\n/**\n * Creates a selector creator function with the specified memoization function\n * and options for customizing memoization behavior.\n *\n * @param memoize - The `memoize` function responsible for memoizing the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @param memoizeOptionsFromArgs - Optional configuration options for the memoization function. These options are then passed to the memoize function as the second argument onwards.\n * @returns A customized `createSelector` function.\n *\n * @example\n * ```ts\n * const customCreateSelector = createSelectorCreator(customMemoize, // Function to be used to memoize `resultFunc`\n *   option1, // Will be passed as second argument to `customMemoize`\n *   option2, // Will be passed as third argument to `customMemoize`\n *   option3 // Will be passed as fourth argument to `customMemoize`\n * )\n *\n * const customSelector = customCreateSelector(\n *   [inputSelector1, inputSelector2],\n *   resultFunc // `resultFunc` will be passed as the first argument to `customMemoize`\n * )\n * ```\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n *\n * @see {@link https://reselect.js.org/api/createSelectorCreator#using-memoize-and-memoizeoptions `createSelectorCreator`}\n *\n * @public\n */\nexport function createSelectorCreator<MemoizeFunction extends UnknownMemoizer>(\n  memoize: MemoizeFunction,\n  ...memoizeOptionsFromArgs: DropFirstParameter<MemoizeFunction>\n): CreateSelectorFunction<MemoizeFunction>\n\n/**\n * Creates a selector creator function with the specified memoization\n * function and options for customizing memoization behavior.\n *\n * @param memoizeOrOptions - Either A `memoize` function or an `options` object containing the `memoize` function.\n * @param memoizeOptionsFromArgs - Optional configuration options for the memoization function. These options are then passed to the memoize function as the second argument onwards.\n * @returns A customized `createSelector` function.\n *\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\n * @template MemoizeOrOptions - The type of the first argument. It can either be a `memoize` function or an `options` object containing the `memoize` function.\n */\nexport function createSelectorCreator<\n  MemoizeFunction extends UnknownMemoizer,\n  ArgsMemoizeFunction extends UnknownMemoizer,\n  MemoizeOrOptions extends\n    | MemoizeFunction\n    | SetRequired<\n        CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\n        'memoize'\n      >\n>(\n  memoizeOrOptions: MemoizeOrOptions,\n  ...memoizeOptionsFromArgs: MemoizeOrOptions extends SetRequired<\n    CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\n    'memoize'\n  >\n    ? never\n    : DropFirstParameter<MemoizeFunction>\n) {\n  /** options initially passed into `createSelectorCreator`. */\n  const createSelectorCreatorOptions: SetRequired<\n    CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\n    'memoize'\n  > = typeof memoizeOrOptions === 'function'\n    ? {\n        memoize: memoizeOrOptions as MemoizeFunction,\n        memoizeOptions: memoizeOptionsFromArgs\n      }\n    : memoizeOrOptions\n\n  const createSelector = <\n    InputSelectors extends SelectorArray,\n    Result,\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\n  >(\n    ...createSelectorArgs: [\n      ...inputSelectors: [...InputSelectors],\n      combiner: Combiner<InputSelectors, Result>,\n      createSelectorOptions?: CreateSelectorOptions<\n        MemoizeFunction,\n        ArgsMemoizeFunction,\n        OverrideMemoizeFunction,\n        OverrideArgsMemoizeFunction\n      >\n    ]\n  ) => {\n    let recomputations = 0\n    let dependencyRecomputations = 0\n    let lastResult: Result\n\n    // Due to the intricacies of rest params, we can't do an optional arg after `...createSelectorArgs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n    let directlyPassedOptions: CreateSelectorOptions<\n      MemoizeFunction,\n      ArgsMemoizeFunction,\n      OverrideMemoizeFunction,\n      OverrideArgsMemoizeFunction\n    > = {}\n\n    // Normally, the result func or \"combiner\" is the last arg\n    let resultFunc = createSelectorArgs.pop() as\n      | Combiner<InputSelectors, Result>\n      | CreateSelectorOptions<\n          MemoizeFunction,\n          ArgsMemoizeFunction,\n          OverrideMemoizeFunction,\n          OverrideArgsMemoizeFunction\n        >\n\n    // If the result func is actually an _object_, assume it's our options object\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc\n      // and pop the real result func off\n      resultFunc = createSelectorArgs.pop() as Combiner<InputSelectors, Result>\n    }\n\n    assertIsFunction(\n      resultFunc,\n      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`\n    )\n\n    // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to `createSelectorCreator`.\n    const combinedOptions = {\n      ...createSelectorCreatorOptions,\n      ...directlyPassedOptions\n    }\n\n    const {\n      memoize,\n      memoizeOptions = [],\n      argsMemoize = weakMapMemoize,\n      argsMemoizeOptions = [],\n      devModeChecks = {}\n    } = combinedOptions\n\n    // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n    const finalMemoizeOptions = ensureIsArray(memoizeOptions)\n    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions)\n    const dependencies = getDependencies(createSelectorArgs) as InputSelectors\n\n    const memoizedResultFunc = memoize(function recomputationWrapper() {\n      recomputations++\n      // apply arguments instead of spreading for performance.\n      // @ts-ignore\n      return (resultFunc as Combiner<InputSelectors, Result>).apply(\n        null,\n        arguments\n      )\n    }, ...finalMemoizeOptions) as Combiner<InputSelectors, Result> &\n      ExtractMemoizerFields<OverrideMemoizeFunction>\n\n    let firstRun = true\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    const selector = argsMemoize(function dependenciesChecker() {\n      dependencyRecomputations++\n      /** Return values of input selectors which the `resultFunc` takes as arguments. */\n      const inputSelectorResults = collectInputSelectorResults(\n        dependencies,\n        arguments\n      )\n\n      // apply arguments instead of spreading for performance.\n      // @ts-ignore\n      lastResult = memoizedResultFunc.apply(null, inputSelectorResults)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { identityFunctionCheck, inputStabilityCheck } =\n          getDevModeChecksExecutionInfo(firstRun, devModeChecks)\n        if (identityFunctionCheck.shouldRun) {\n          identityFunctionCheck.run(\n            resultFunc as Combiner<InputSelectors, Result>,\n            inputSelectorResults,\n            lastResult\n          )\n        }\n\n        if (inputStabilityCheck.shouldRun) {\n          // make a second copy of the params, to check if we got the same results\n          const inputSelectorResultsCopy = collectInputSelectorResults(\n            dependencies,\n            arguments\n          )\n\n          inputStabilityCheck.run(\n            { inputSelectorResults, inputSelectorResultsCopy },\n            { memoize, memoizeOptions: finalMemoizeOptions },\n            arguments\n          )\n        }\n\n        if (firstRun) firstRun = false\n      }\n\n      return lastResult\n    }, ...finalArgsMemoizeOptions) as unknown as Selector<\n      GetStateFromSelectors<InputSelectors>,\n      Result,\n      GetParamsFromSelectors<InputSelectors>\n    > &\n      ExtractMemoizerFields<OverrideArgsMemoizeFunction>\n\n    return Object.assign(selector, {\n      resultFunc,\n      memoizedResultFunc,\n      dependencies,\n      dependencyRecomputations: () => dependencyRecomputations,\n      resetDependencyRecomputations: () => {\n        dependencyRecomputations = 0\n      },\n      lastResult: () => lastResult,\n      recomputations: () => recomputations,\n      resetRecomputations: () => {\n        recomputations = 0\n      },\n      memoize,\n      argsMemoize\n    }) as OutputSelector<\n      InputSelectors,\n      Result,\n      OverrideMemoizeFunction,\n      OverrideArgsMemoizeFunction\n    >\n  }\n\n  Object.assign(createSelector, {\n    withTypes: () => createSelector\n  })\n\n  return createSelector as CreateSelectorFunction<\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  >\n}\n\n/**\n * Accepts one or more \"input selectors\" (either as separate arguments or a single array),\n * a single \"result function\" / \"combiner\", and an optional options object, and\n * generates a memoized selector function.\n *\n * @see {@link https://reselect.js.org/api/createSelector `createSelector`}\n *\n * @public\n */\nexport const createSelector =\n  /* #__PURE__ */ createSelectorCreator(weakMapMemoize)\n","import { createSelector } from './createSelectorCreator'\n\nimport type { CreateSelectorFunction } from './createSelectorCreator'\nimport type {\n  InterruptRecursion,\n  ObjectValuesToTuple,\n  OutputSelector,\n  Selector,\n  Simplify,\n  UnknownMemoizer\n} from './types'\nimport { assertIsObject } from './utils'\nimport type { weakMapMemoize } from './weakMapMemoize'\n\n/**\n * Represents a mapping of selectors to their return types.\n *\n * @template TObject - An object type where each property is a selector function.\n *\n * @public\n */\nexport type SelectorResultsMap<TObject extends SelectorsObject> = {\n  [Key in keyof TObject]: ReturnType<TObject[Key]>\n}\n\n/**\n * Represents a mapping of selectors for each key in a given root state.\n *\n * This type is a utility that takes a root state object type and\n * generates a corresponding set of selectors. Each selector is associated\n * with a key in the root state, allowing for the selection\n * of specific parts of the state.\n *\n * @template RootState - The type of the root state object.\n *\n * @since 5.0.0\n * @public\n */\nexport type RootStateSelectors<RootState = any> = {\n  [Key in keyof RootState]: Selector<RootState, RootState[Key], []>\n}\n\n/**\n * @deprecated Please use {@linkcode StructuredSelectorCreator.withTypes createStructuredSelector.withTypes<RootState>()} instead. This type will be removed in the future.\n * @template RootState - The type of the root state object.\n *\n * @since 5.0.0\n * @public\n */\nexport type TypedStructuredSelectorCreator<RootState = any> =\n  /**\n   * A convenience function that simplifies returning an object\n   * made up of selector results.\n   *\n   * @param inputSelectorsObject - A key value pair consisting of input selectors.\n   * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\n   * @returns A memoized structured selector.\n   *\n   * @example\n   * <caption>Modern Use Case</caption>\n   * ```ts\n   * import { createSelector, createStructuredSelector } from 'reselect'\n   *\n   * interface RootState {\n   *   todos: {\n   *     id: number\n   *     completed: boolean\n   *     title: string\n   *     description: string\n   *   }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * // This:\n   * const structuredSelector = createStructuredSelector(\n   *   {\n   *     todos: (state: RootState) => state.todos,\n   *     alerts: (state: RootState) => state.alerts,\n   *     todoById: (state: RootState, id: number) => state.todos[id]\n   *   },\n   *   createSelector\n   * )\n   *\n   * // Is essentially the same as this:\n   * const selector = createSelector(\n   *   [\n   *     (state: RootState) => state.todos,\n   *     (state: RootState) => state.alerts,\n   *     (state: RootState, id: number) => state.todos[id]\n   *   ],\n   *   (todos, alerts, todoById) => {\n   *     return {\n   *       todos,\n   *       alerts,\n   *       todoById\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @example\n   * <caption>In your component:</caption>\n   * ```tsx\n   * import type { RootState } from 'createStructuredSelector/modernUseCase'\n   * import { structuredSelector } from 'createStructuredSelector/modernUseCase'\n   * import type { FC } from 'react'\n   * import { useSelector } from 'react-redux'\n   *\n   * interface Props {\n   *   id: number\n   * }\n   *\n   * const MyComponent: FC<Props> = ({ id }) => {\n   *   const { todos, alerts, todoById } = useSelector((state: RootState) =>\n   *     structuredSelector(state, id)\n   *   )\n   *\n   *   return (\n   *     <div>\n   *       Next to do is:\n   *       <h2>{todoById.title}</h2>\n   *       <p>Description: {todoById.description}</p>\n   *       <ul>\n   *         <h3>All other to dos:</h3>\n   *         {todos.map(todo => (\n   *           <li key={todo.id}>{todo.title}</li>\n   *         ))}\n   *       </ul>\n   *     </div>\n   *   )\n   * }\n   * ```\n   *\n   * @example\n   * <caption>Simple Use Case</caption>\n   * ```ts\n   * const selectA = state => state.a\n   * const selectB = state => state.b\n   *\n   * // The result function in the following selector\n   * // is simply building an object from the input selectors\n   * const structuredSelector = createSelector(selectA, selectB, (a, b) => ({\n   *   a,\n   *   b\n   * }))\n   *\n   * const result = structuredSelector({ a: 1, b: 2 }) // will produce { x: 1, y: 2 }\n   * ```\n   *\n   * @template InputSelectorsObject - The shape of the input selectors object.\n   * @template MemoizeFunction - The type of the memoize function that is used to create the structured selector. It defaults to `weakMapMemoize`.\n   * @template ArgsMemoizeFunction - The type of the of the memoize function that is used to memoize the arguments passed into the generated structured selector. It defaults to `weakMapMemoize`.\n   *\n   * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n   */\n  <\n    InputSelectorsObject extends RootStateSelectors<RootState> = RootStateSelectors<RootState>,\n    MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n    ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n  >(\n    inputSelectorsObject: InputSelectorsObject,\n    selectorCreator?: CreateSelectorFunction<\n      MemoizeFunction,\n      ArgsMemoizeFunction\n    >\n  ) => OutputSelector<\n    ObjectValuesToTuple<InputSelectorsObject>,\n    Simplify<SelectorResultsMap<InputSelectorsObject>>,\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n/**\n * Represents an object where each property is a selector function.\n *\n * @template StateType - The type of state that all the selectors operate on.\n *\n * @public\n */\nexport type SelectorsObject<StateType = any> = Record<\n  string,\n  Selector<StateType>\n>\n\n/**\n * It provides a way to create structured selectors.\n * The structured selector can take multiple input selectors\n * and map their output to an object with specific keys.\n *\n * @template StateType - The type of state that the structured selectors created with this structured selector creator will operate on.\n *\n * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n *\n * @public\n */\nexport interface StructuredSelectorCreator<StateType = any> {\n  /**\n   * A convenience function that simplifies returning an object\n   * made up of selector results.\n   *\n   * @param inputSelectorsObject - A key value pair consisting of input selectors.\n   * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\n   * @returns A memoized structured selector.\n   *\n   * @example\n   * <caption>Modern Use Case</caption>\n   * ```ts\n   * import { createSelector, createStructuredSelector } from 'reselect'\n   *\n   * interface RootState {\n   *   todos: {\n   *     id: number\n   *     completed: boolean\n   *     title: string\n   *     description: string\n   *   }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * // This:\n   * const structuredSelector = createStructuredSelector(\n   *   {\n   *     todos: (state: RootState) => state.todos,\n   *     alerts: (state: RootState) => state.alerts,\n   *     todoById: (state: RootState, id: number) => state.todos[id]\n   *   },\n   *   createSelector\n   * )\n   *\n   * // Is essentially the same as this:\n   * const selector = createSelector(\n   *   [\n   *     (state: RootState) => state.todos,\n   *     (state: RootState) => state.alerts,\n   *     (state: RootState, id: number) => state.todos[id]\n   *   ],\n   *   (todos, alerts, todoById) => {\n   *     return {\n   *       todos,\n   *       alerts,\n   *       todoById\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @example\n   * <caption>In your component:</caption>\n   * ```tsx\n   * import type { RootState } from 'createStructuredSelector/modernUseCase'\n   * import { structuredSelector } from 'createStructuredSelector/modernUseCase'\n   * import type { FC } from 'react'\n   * import { useSelector } from 'react-redux'\n   *\n   * interface Props {\n   *   id: number\n   * }\n   *\n   * const MyComponent: FC<Props> = ({ id }) => {\n   *   const { todos, alerts, todoById } = useSelector((state: RootState) =>\n   *     structuredSelector(state, id)\n   *   )\n   *\n   *   return (\n   *     <div>\n   *       Next to do is:\n   *       <h2>{todoById.title}</h2>\n   *       <p>Description: {todoById.description}</p>\n   *       <ul>\n   *         <h3>All other to dos:</h3>\n   *         {todos.map(todo => (\n   *           <li key={todo.id}>{todo.title}</li>\n   *         ))}\n   *       </ul>\n   *     </div>\n   *   )\n   * }\n   * ```\n   *\n   * @example\n   * <caption>Simple Use Case</caption>\n   * ```ts\n   * const selectA = state => state.a\n   * const selectB = state => state.b\n   *\n   * // The result function in the following selector\n   * // is simply building an object from the input selectors\n   * const structuredSelector = createSelector(selectA, selectB, (a, b) => ({\n   *   a,\n   *   b\n   * }))\n   *\n   * const result = structuredSelector({ a: 1, b: 2 }) // will produce { x: 1, y: 2 }\n   * ```\n   *\n   * @template InputSelectorsObject - The shape of the input selectors object.\n   * @template MemoizeFunction - The type of the memoize function that is used to create the structured selector. It defaults to `weakMapMemoize`.\n   * @template ArgsMemoizeFunction - The type of the of the memoize function that is used to memoize the arguments passed into the generated structured selector. It defaults to `weakMapMemoize`.\n   *\n   * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n   */\n  <\n    InputSelectorsObject extends SelectorsObject<StateType>,\n    MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n    ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n  >(\n    inputSelectorsObject: InputSelectorsObject,\n    selectorCreator?: CreateSelectorFunction<\n      MemoizeFunction,\n      ArgsMemoizeFunction\n    >\n  ): OutputSelector<\n    ObjectValuesToTuple<InputSelectorsObject>,\n    Simplify<SelectorResultsMap<InputSelectorsObject>>,\n    MemoizeFunction,\n    ArgsMemoizeFunction\n  > &\n    InterruptRecursion\n\n  /**\n   * Creates a \"pre-typed\" version of\n   * {@linkcode createStructuredSelector createStructuredSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every\n   * {@linkcode createStructuredSelector createStructuredSelector} call.\n   *\n   * @returns A pre-typed `createStructuredSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * import { createStructuredSelector } from 'reselect'\n   *\n   * export interface RootState {\n   *   todos: { id: number; completed: boolean }[]\n   *   alerts: { id: number; read: boolean }[]\n   * }\n   *\n   * export const createStructuredAppSelector =\n   *   createStructuredSelector.withTypes<RootState>()\n   *\n   * const structuredAppSelector = createStructuredAppSelector({\n   *   // Type of `state` is set to `RootState`, no need to manually set the type\n   *   todos: state => state.todos,\n   *   alerts: state => state.alerts,\n   *   todoById: (state, id: number) => state.todos[id]\n   * })\n   *\n   * ```\n   * @template OverrideStateType - The specific type of state used by all structured selectors created with this structured selector creator.\n   *\n   * @see {@link https://reselect.js.org/api/createstructuredselector#defining-a-pre-typed-createstructuredselector `createSelector.withTypes`}\n   *\n   * @since 5.1.0\n   */\n  withTypes: <\n    OverrideStateType extends StateType\n  >() => StructuredSelectorCreator<OverrideStateType>\n}\n\n/**\n * A convenience function that simplifies returning an object\n * made up of selector results.\n *\n * @param inputSelectorsObject - A key value pair consisting of input selectors.\n * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\n * @returns A memoized structured selector.\n *\n * @example\n * <caption>Modern Use Case</caption>\n * ```ts\n * import { createSelector, createStructuredSelector } from 'reselect'\n *\n * interface RootState {\n *   todos: {\n *     id: number\n *     completed: boolean\n *     title: string\n *     description: string\n *   }[]\n *   alerts: { id: number; read: boolean }[]\n * }\n *\n * // This:\n * const structuredSelector = createStructuredSelector(\n *   {\n *     todos: (state: RootState) => state.todos,\n *     alerts: (state: RootState) => state.alerts,\n *     todoById: (state: RootState, id: number) => state.todos[id]\n *   },\n *   createSelector\n * )\n *\n * // Is essentially the same as this:\n * const selector = createSelector(\n *   [\n *     (state: RootState) => state.todos,\n *     (state: RootState) => state.alerts,\n *     (state: RootState, id: number) => state.todos[id]\n *   ],\n *   (todos, alerts, todoById) => {\n *     return {\n *       todos,\n *       alerts,\n *       todoById\n *     }\n *   }\n * )\n * ```\n *\n * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\n *\n * @public\n */\nexport const createStructuredSelector: StructuredSelectorCreator =\n  Object.assign(\n    <\n      InputSelectorsObject extends SelectorsObject,\n      MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\n      ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\n    >(\n      inputSelectorsObject: InputSelectorsObject,\n      selectorCreator: CreateSelectorFunction<\n        MemoizeFunction,\n        ArgsMemoizeFunction\n      > = createSelector as CreateSelectorFunction<\n        MemoizeFunction,\n        ArgsMemoizeFunction\n      >\n    ) => {\n      assertIsObject(\n        inputSelectorsObject,\n        'createStructuredSelector expects first argument to be an object ' +\n          `where each property is a selector, instead received a ${typeof inputSelectorsObject}`\n      )\n      const inputSelectorKeys = Object.keys(inputSelectorsObject)\n      const dependencies = inputSelectorKeys.map(\n        key => inputSelectorsObject[key]\n      )\n      const structuredSelector = selectorCreator(\n        dependencies,\n        (...inputSelectorResults: any[]) => {\n          return inputSelectorResults.reduce((composition, value, index) => {\n            composition[inputSelectorKeys[index]] = value\n            return composition\n          }, {})\n        }\n      )\n      return structuredSelector\n    },\n    { withTypes: () => createStructuredSelector }\n  ) as StructuredSelectorCreator\n","import { createSelector } from \"reselect\";\r\n const getUsers=(state)=>{\r\n    return state.peoplePage.people\r\n}\r\n export const getNumberPage=(state)=>{\r\n    return state.peoplePage.numberPage\r\n}\r\n export const getPeopleCount=(state)=>{\r\n    return state.peoplePage.peopleCount\r\n}\r\n export const getTotalCount=(state)=>{\r\n    return state.peoplePage.totalCount\r\n}\r\nexport const getIsFetching=(state)=>{\r\n    return state.peoplePage.isFetching\r\n}\r\n const getDisabledFollowsWhenFetshing=(state)=>{\r\n    return state.peoplePage.disabledFollowsWhenFetshing\r\n}\r\n// ------------------------------reselector---------------------------\r\nexport const getUsersSelector=createSelector(getUsers,(people)=>{\r\n    return people.filter(u=>true)\r\n})\r\nexport const getNumberPageSelector=createSelector(getNumberPage,(numberPage)=>{\r\n    return numberPage.filter(u=>true)\r\n})\r\nexport const getPeopleCountSelector=createSelector(getPeopleCount,(peopleCount)=>{\r\n    return peopleCount.filter(u=>true)\r\n})\r\nexport const getTotalCountSelector=createSelector(getTotalCount,(totalCount)=>{\r\n    return totalCount.filter(u=>true)\r\n})\r\nexport const getIsFetchingSelector=createSelector(getIsFetching,(isFetching)=>{\r\n    return isFetching.filter(u=>true)\r\n})\r\nexport const getDisabledFollowsWhenFetshingSelector=createSelector(getDisabledFollowsWhenFetshing,(disabledFollowsWhenFetshing)=>{\r\n    return disabledFollowsWhenFetshing.filter(u=>true)\r\n})\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport People from \"./People\";\r\n// import {\r\n//   follow_AC,\r\n//   set_isFetching_AC,\r\n//   set_numberPage_AC,\r\n//   set_people_AC,\r\n//   set_total_count_AC,\r\n//   unfollow_AC,\r\n// } from \"../../redux/peopleReduser\";\r\nimport {\r\n  getUsers,\r\n  getOnPaginationClick,\r\n  getFollow,\r\n  getUnFollow\r\n} from \"../../redux/peopleReduser\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { getDisabledFollowsWhenFetshingSelector, getIsFetching, getNumberPage, getPeopleCount, getTotalCount, getUsersSelector } from \"../../redux/selectors/peopleSelectors\";\r\n\r\nconst PeopleAPIContainer=React.memo((props)=>{\r\n  useEffect(()=>{\r\n    props.getUsers(props.peopleCount,props.numberPage)\r\n  },[props.peopleCount,props.numberPage])\r\n    const  onPaginationClick=(id)=>{\r\n     props.getOnPaginationClick(props.peopleCount,id)\r\n  }\r\n    const follow=(id)=>{\r\n      props.getFollow(id)\r\n    }\r\n    const unfollow=(id)=>{\r\n      props.getUnFollow(id)\r\n    }\r\n\r\n      return <People totalCount={props.totalCount} peopleCount={props.peopleCount} onPaginationClick={onPaginationClick} numberPage={props.numberPage} people={props.people}\r\n    follow={follow} unfollow={unfollow} isFetching={props.isFetching} disabledFollowsWhenFetshing={props.disabledFollowsWhenFetshing}\r\n    />\r\n}\r\n)\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    people: getUsersSelector(state),\r\n    numberPage: getNumberPage(state),\r\n    peopleCount: getPeopleCount(state),\r\n    totalCount: getTotalCount(state),\r\n    isFetching:getIsFetching(state),\r\n    disabledFollowsWhenFetshing:getDisabledFollowsWhenFetshingSelector(state),\r\n  };\r\n};\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     follow: (id) => dispatch(follow_AC(id)),\r\n//     unfollow: (id) => dispatch(unfollow_AC(id)),\r\n//     setPeople: (people) => dispatch(set_people_AC(people)),\r\n//     setTotalCount: (totalCount) => dispatch(set_total_count_AC(totalCount)),\r\n//     setNumberPage: (numberPage) => dispatch(set_numberPage_AC(numberPage)),\r\n//     setIsFetching:(isFetching)=>dispatch(set_isFetching_AC(isFetching)),\r\n//   };\r\n// };\r\n\r\nexport default compose(connect(mapStateToProps,{getUsers,getOnPaginationClick,getFollow,getUnFollow}),\r\nwithAuthRedirect)(PeopleAPIContainer);\r\n\r\n"],"names":["_ref","peopleCount","totalCount","numberPage","onPaginationClick","portionSize","props","pages","pagesCountLength","Math","ceil","portionNumber","setPortioNumber","useState","portionCount","leftCorner","rightCorner","useEffect","index","push","_jsxs","className","s","paginationConteiner","children","_jsx","concat","paginControl","prev","onClick","divEmpty","paginationNumber","filter","p","map","paginationHover","next","Pagination","isFetching","Preloader","c","people","homos","NavLink","to","id","src","photos","small","pustoyprofile","alt","name","surname","country","sityname","friends","followed","disabled","disabledFollowsWhenFetshing","some","unfollow","follow","assertIsFunction","func","errorMessage","arguments","length","undefined","TypeError","ensureIsArray","item","Array","isArray","getDependencies","createSelectorArgs","dependencies","array","every","itemTypes","join","assertIsArrayOfFunctions","Symbol","Object","getPrototypeOf","Ref","WeakRef","constructor","value","deref","this","UNTERMINATED","TERMINATED","createCacheNode","v","o","weakMapMemoize","options","fnNode","resultEqualityCheck","lastResult","resultsCount","memoized","cacheNode","i","l","arg","objectCache","WeakMap","objectNode","get","set","primitiveCache","Map","primitiveNode","terminatedNode","result","apply","_lastResult$deref","_lastResult","_lastResult$deref2","lastResultValue","call","clearCache","resetResultsCount","createSelectorCreator","memoizeOrOptions","_len","memoizeOptionsFromArgs","_key2","createSelectorCreatorOptions","memoize","memoizeOptions","createSelector2","_len2","_key3","recomputations","dependencyRecomputations","directlyPassedOptions","resultFunc","pop","combinedOptions","argsMemoize","argsMemoizeOptions","devModeChecks","finalMemoizeOptions","finalArgsMemoizeOptions","memoizedResultFunc","selector","inputSelectorResults","inputSelectorArgs","collectInputSelectorResults","assign","resetDependencyRecomputations","resetRecomputations","withTypes","createSelector","createStructuredSelector","inputSelectorsObject","selectorCreator","object","assertIsObject","inputSelectorKeys","keys","structuredSelector","key","_len3","_key4","reduce","composition","getNumberPage","state","peoplePage","getPeopleCount","getTotalCount","getIsFetching","getUsersSelector","u","getDisabledFollowsWhenFetshingSelector","PeopleAPIContainer","React","getUsers","People","getOnPaginationClick","getFollow","getUnFollow","compose","connect","withAuthRedirect"],"sourceRoot":""}